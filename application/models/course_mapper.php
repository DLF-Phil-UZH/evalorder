<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Course_mapper extends CI_Model{
	
	// Database tables
	private $tableCourses;
	private $tableLecturers;
	private $tableParticipants;
	private $tableMapping;
	
	// Lecturer/recipient collections to avoid duplicates when generating XML file
	private $allLecturers;
	private $allRecipients;
	private $newRecipientIndex;
	
	public function __construct(){
		parent::__construct();
		$this->load->database();
		$this->load->model('Course_model');
		$this->load->helper(array('excel', 'extended_form'));
		$this->setTableNames();
		$this->newRecipientIndex = 1; // To avoid recipients with key 0
	}
	
	// Sets table names out of config, cannot be done directly on declaration of variables since config is not loaded yet at this point of execution
	private function setTableNames(){
		$this->tableCourses = $this->config->item('table_courses');
		$this->tableLecturers = $this->config->item('table_lecturers');
		$this->tableParticipants = $this->config->item('table_participants');
		$this->tableMapping = $this->config->item('table_courses_lecturers');
	}
	
	// Write evaluation order for course to database
	public function storeOrder(Course_model $pCourse){
		// Exit if survey type is invalid
		if(!(strcmp($pCourse->getSurveyType(), 'onlineumfrage') === 0 || strcmp($pCourse->getSurveyType(), 'papierumfrage') === 0)){
			log_message('error', 'storeOrder(): Invalid survey type.');
			show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltiger Umfragetyp]. Bitte versuchen Sie es nochmals.');
		}
		
		$orderData = array(
			'name' => $pCourse->getName(),
			'type' => $pCourse->getType(),
			'surveyType' => $pCourse->getSurveyType(),
			'semester' => $pCourse->getSemester(),
			// 'language' => $pCourse->getLanguage(),
			'ordererFirstname' => $pCourse->getOrdererFirstname(),
			'ordererSurname' => $pCourse->getOrdererSurname(),
			'ordererEmail' => $pCourse->getOrdererEmail(),
			'ordererUniqueId' => $pCourse->getOrdererUniqueId()
		);
		
		// Do all database updates as transactions
		$this->db->trans_start();
		$this->db->insert($this->tableCourses, $orderData);
		$pCourse->setId($this->db->insert_id()); // Retrieve id for order generated by DBMS
		
		/*
		Unused, participant adresses will be extracted of Excel file during XML generation
		
		// Save e-mail addresses of participants and turnout if it is an online survey
		if(strcmp($pCourse->getSurveyType(), 'onlineumfrage') === 0){
			$participants = $pCourse->getParticipants();
			if(isset($participants) && is_array($participants) && (count($participants) > 0)){
				foreach($participants as $participant){
					$this->db->insert($this->tableParticipants, array(
						'email' => $participant,
						'courseId' => $pCourse->getId()
					));
				}
				$this->db->where('id', $pCourse->getId());
				$this->db->update($this->tableCourses, array('turnout' => count($participants)));
			}
			else{
				log_message('error', 'storeOrder(): Invalid participant array.');
				show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Teilnehmer-Adressen]. Bitte versuchen Sie es nochmals.');
			}
		}
		
		// Save turnout if it is a paper survey
		elseif(strcmp($pCourse->getSurveyType(), 'papierumfrage') === 0){
			$turnout = $pCourse->getTurnout();
			if(isset($turnout) && is_int($turnout) && $turnout >= 10){
				$this->db->where('id', $pCourse->getId());
				$this->db->update($this->tableCourses, array('turnout' => $turnout));
			}
			else{
				log_message('error', 'storeOrder(): Invalid turnout.');
				show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Teilnehmerzahl]. Bitte versuchen Sie es nochmals.');
			}
		}
		
		*/
		
		// Save turnout
		$turnout = $pCourse->getTurnout();
		//log_message('debug', 'turnout = '.$turnout.'---type = '.gettype($turnout));
		if(isset($turnout) && is_int($turnout)){
			// if(strcmp($pCourse->getSurveyType(), 'papierumfrage') === 0 && $turnout < 10){
				// log_message('error', 'storeOrder(): Invalid turnout.');
				// show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [zu wenig Teilnehmer f&uuml;r eine Papier-Umfrage]. Bitte versuchen Sie es nochmals.');
			// }
			$this->db->where('id', $pCourse->getId());
			$this->db->update($this->tableCourses, array('turnout' => $turnout));
		}
		else{
			log_message('error', 'storeOrder(): Invalid turnout.');
			show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Teilnehmerzahl]. Bitte versuchen Sie es nochmals.');
		}
		
		// Save language if existent
		$language = $pCourse->getLanguage();
		if(isset($language) && is_string($language) && (strlen($language) > 0)){
			$this->db->where('id', $pCourse->getId());
			$this->db->update($this->tableCourses, array('language' => $language));
		}
		
		// Save participant file names if existent
		$participantFile1 = $pCourse->getParticipantFile1();
		if(isset($participantFile1) && is_string($participantFile1) && (strlen($participantFile1) > 0)){
			$this->db->where('id', $pCourse->getId());
			$this->db->update($this->tableCourses, array('participantFile1' => $participantFile1));
		}
		
		$participantFile2 = $pCourse->getParticipantFile2();
		if(isset($participantFile2) && is_string($participantFile2) && (strlen($participantFile2) > 0)){
			$this->db->where('id', $pCourse->getId());
			$this->db->update($this->tableCourses, array('participantFile2' => $participantFile2));
		}
		
		// Save lecturers
		$lecturers = $pCourse->getLecturers();
		if(isset($lecturers) && is_array($lecturers) && (count($lecturers) > 0)){
			foreach($lecturers as $lecturer){
				if(is_array($lecturer)){
					// Mandatory data per lecturer
					$lecturerData = array(
						'firstname' => $lecturer['firstname'],
						'surname' => $lecturer['surname'],
						'gender' => $lecturer['gender'], // 'm' or 'f'
						'email' => $lecturer['email'],
						// Id of inserted course
						'courseId' => $pCourse->getId()
					);
					// Add title if set (= entered by user)
					if(isset($lecturer['title'])){
						$lecturerData['title'] = $lecturer['title'];
					}
					$this->db->insert($this->tableLecturers, $lecturerData);
				}
				else{
					log_message('error', 'storeOrder(): Invalid lecturer in lecturer array.');
					show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige(r) Dozent(in)]. Bitte versuchen Sie es nochmals.');
				}
			}
		}
		else{
			log_message('error', 'storeOrder(): Invalid lecturer array.');
			show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Dozenten]. Bitte versuchen Sie es nochmals.');
		}
		
		// Save lecturer-id and course-id in mapping-table
		$lecturerQuery = $this->db->get_where($this->tableLecturers, array('courseId' => $pCourse->getId()));
		if($lecturerQuery->num_rows() > 0){
			foreach($lecturerQuery->result_array() as $lecturer){
					$mappingData = array(
						'lecturer_id' => $lecturer['id'],
						'course_id' => $pCourse->getId()
					);
					$this->db->insert($this->tableMapping, $mappingData);	
			}
		}
		else{
			log_message('error', 'storeOrder(): Invalid lecturer array.');
			show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Dozenten]. Bitte versuchen Sie es nochmals.');
		}
		
		$this->db->trans_complete();
		
		if($this->db->trans_status() === FALSE){
			log_message('error', 'storeOrder(): Transaction failed.');
			show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [Datenbankfehler]. Bitte versuchen Sie es nochmals.');
		}
		else{
			log_message('info', 'storeOrder(): Transaction complete. Course ' . $pCourse->getId() . ' stored.');
		}
	}
	
	// Returns all courses as an array of course models
	public function getAllCourses(){
		$allCourses = array();
		$courseQuery = $this->db->get($this->tableCourses);
		
		if($courseQuery->num_rows() > 0){
			foreach($courseQuery->result() as $course){
				$tempCourse = new Course_model();
				
				$tempCourse->setId($course->id);
				$tempCourse->setName($course->name);
				$tempCourse->setType($course->type);
				$tempCourse->setSurveyType($course->surveyType);
				$tempCourse->setLanguage($course->language);
				$tempCourse->setOrdererFirstname($course->ordererFirstname);
				$tempCourse->setOrdererSurname($course->ordererSurname);
				$tempCourse->setOrdererEmail($course->ordererEmail);
				$tempCourse->setOrdererUniqueId($course->ordererUniqueId);
				$tempCourse->setOrderTime($course->orderTime);
				$tempCourse->setParticipantFile1($course->participantFile1);
				$tempCourse->setParticipantFile2($course->participantFile2);
				$tempCourse->setLastExport($course->lastExport);
				$tempCourse->setSemester($course->semester);
				
				// Retrieve linked lecturers
				$lecturerQuery = $this->db->get_where($this->tableLecturers, array('courseId' => $course->id));
				if($lecturerQuery->num_rows() > 0){
					foreach($lecturerQuery->result_array() as $lecturer){
						$tempCourse->addLecturer($lecturer);
					}
				}
				else{
					log_message('error', 'course_mapper->getAllCourses(): Corrupted lecturer data (course ID ' . $course->id . ').');
					show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [Datenbankfehler]. Bitte versuchen Sie es nochmals.');
				}
				
				// Paper survey
				if(strcmp($course->surveyType, 'papierumfrage') === 0){
					$tempCourse->setTurnout($course->turnout);
				}
				
				// Online survey
				elseif(strcmp($course->surveyType, 'onlineumfrage') === 0){
					
					$participants1 = array();
					$participants2 = array();
					
					// Add participant addresses from file 1, if available
					$participantFile1 = $tempCourse->getPathParticipantFile1();
					if($participantFile1 !== FALSE){
						$fileCheck = checkParticipantFile($participantFile1);
						if($fileCheck[0] === TRUE){
							$participants1 = extractParticipantAddresses($participantFile1, $fileCheck[1]);
						}
					}
					
					// Add participant addresses from file 2, if available
					$participantFile2 = $tempCourse->getPathParticipantFile2();
					if($participantFile2 !== FALSE){
						$fileCheck = checkParticipantFile($participantFile2);
						if($fileCheck[0] === TRUE){
							$participants2 = extractParticipantAddresses($participantFile2, $fileCheck[1]);
						}
					}
					
					if(count($participants1) + count($participants2) > 0){
						$tempCourse->setParticipants(array_merge($participants1, $participants2));
					}
					
					// // Retrieve linked participants
					// $participantQuery = $this->db->get_where($this->tableParticipants, array('courseId' => $course->id));
					// if($participantQuery->num_rows() > 0){
						// foreach($participantQuery->result() as $participant){
							// $tempCourse->addParticipant($participant->email);
						// }
					// }
					
					else{
						log_message('error', 'course_mapper->getAllCourses(): Corrupted participant data (course ID ' . $course->id . ').');
						show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [Datenbankfehler]. Bitte versuchen Sie es nochmals.');
					}
				}
				
				array_push($allCourses, $tempCourse);
			}
			
			return $allCourses;
			
		}
	}
	
	// Returns course with passed ID as course model
	public function getCourseById($pCourseId){
		
		$courseQuery = $this->db->get_where($this->tableCourses, array('id' => $pCourseId));
		
		if($courseQuery->num_rows() === 1){
			foreach($courseQuery->result() as $course){
				$tempCourse = new Course_model();
				
				$tempCourse->setId($course->id);
				$tempCourse->setName($course->name);
				$tempCourse->setType($course->type);
				$tempCourse->setSurveyType($course->surveyType);
				$tempCourse->setLanguage($course->language);
				$tempCourse->setOrdererFirstname($course->ordererFirstname);
				$tempCourse->setOrdererSurname($course->ordererSurname);
				$tempCourse->setOrdererEmail($course->ordererEmail);
				$tempCourse->setOrdererUniqueId($course->ordererUniqueId);
				$tempCourse->setOrderTime($course->orderTime);
				$tempCourse->setParticipantFile1($course->participantFile1);
				$tempCourse->setParticipantFile2($course->participantFile2);
				$tempCourse->setLastExport($course->lastExport);
				$tempCourse->setSemester($course->semester);
				
				// Retrieve linked lecturers
				$lecturerQuery = $this->db->get_where($this->tableLecturers, array('courseId' => $course->id));
				if($lecturerQuery->num_rows() > 0){
					foreach($lecturerQuery->result_array() as $lecturer){
						$tempCourse->addLecturer($lecturer);
					}
				}
				else{
					log_message('error', 'course_mapper->getCourseById(): Corrupted lecturer data (course ID ' . $course->id . ').');
					show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [Datenbankfehler]. Bitte versuchen Sie es nochmals.');
				}
				
				// Paper survey
				if(strcmp($course->surveyType, 'papierumfrage') === 0){
					$tempCourse->setTurnout($course->turnout);
				}
				
				// Online survey
				elseif(strcmp($course->surveyType, 'onlineumfrage') === 0){
					
					$participants1 = array();
					$participants2 = array();
					
					// Add participant addresses from file 1, if available
					$participantFile1 = $tempCourse->getPathParticipantFile1();
					if($participantFile1 !== FALSE){
						$fileCheck = checkParticipantFile($participantFile1);
						if($fileCheck[0] === TRUE){
							$participants1 = extractParticipantAddresses($participantFile1, $fileCheck[1]);
						}
					}
					
					// Add participant addresses from file 2, if available
					$participantFile2 = $tempCourse->getPathParticipantFile2();
					if($participantFile2 !== FALSE){
						$fileCheck = checkParticipantFile($participantFile2);
						if($fileCheck[0] === TRUE){
							$participants2 = extractParticipantAddresses($participantFile2, $fileCheck[1]);
						}
					}
					
					if(count($participants1) + count($participants2) > 0){
						$tempCourse->setParticipants(array_merge($participants1, $participants2));
					}
					
					// // Retrieve linked participants
					// $participantQuery = $this->db->get_where($this->tableParticipants, array('courseId' => $course->id));
					// if($participantQuery->num_rows() > 0){
						// foreach($participantQuery->result() as $participant){
							// $tempCourse->addParticipant($participant->email);
						// }
					// }
					
					else{
						log_message('error', 'course_mapper->getCourseById(): Corrupted participant data (course ID ' . $course->id . ').');
						show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [Datenbankfehler]. Bitte versuchen Sie es nochmals.');
					}
				}
				
			}
			
			return $tempCourse;
			
		}
		else{
			log_message('error', 'getCourseById(): No course with id ' . $pCourseId . ' found in database.');
			show_error('Kritischer Fehler in der Datenbank [Veranstaltung mit ID ' . $pCourseId . ' nicht gefunden]. Bitte versuchen Sie es nochmals.');
		}
	}
	
	// TODO: Function to generate XML file for passed course IDs
	public function writeXMLImportFile($pCourseIds){
		$courses = array();
		
		// Gather course objects for all course IDs into one array
		foreach($pCourseIds as $courseId){
			if(isDigit($courseId)){
				log_message('debug', 'writeXMLImportFile(): course with ID ' . $courseId . ' retrieved from database');
				array_push($courses, $this->getCourseById($courseId));
			}
			else{
				log_message('error', 'writeXMLImportFile(): Invalid course ID: ' . $courseId);
				show_error('Kritischer Fehler in der Verarbeitung Ihrer Eingaben [ung&uuml;ltige Kurs-ID]. Bitte versuchen Sie es nochmals.');
			}
		}
		
		$this->config->load('standardwerte_config');
		// Initialize lecturer and recipient collections
		$this->allLecturers = array();
		$this->allRecipients = array();
		
		log_message('debug', 'writeXMLImportFile_1');
		
		// Prepare XML content
		$lXMLWriter = new xmlWriter();
		$lXMLWriter->openMemory();
		$lXMLWriter->setIndent(true);
		$lXMLWriter->startDocument("1.0", "utf-8"); // First line
		$lXMLWriter->startElement("EvaSys"); // Root element
		
		log_message('debug', 'writeXMLImportFile_2');
		
		// <Lecture> elements
		foreach($courses as $lCourse){
			
			log_message('debug', 'writeXMLImportFile_3');
			
			$lXMLWriter->startElement("Lecture"); // Course
			$lXMLWriter->writeAttribute("key", "Course" . $lCourse->getId()); // Course: attribute
			$lXMLWriter->startElement("dozs"); // Lecturers
			
			foreach($lCourse->getLecturers() as $lLecturer){
				log_message('debug', 'writeXMLImportFile_4');
				$lLecturerId = $this->checkForUniqueLecturer($lLecturer);
				
				$lXMLWriter->startElement("doz"); // Lecturer
				$lXMLWriter->startElement("EvaSysRef");
				$lXMLWriter->writeAttribute("type", "Person");
				$lXMLWriter->writeAttribute("key", "User" . $lLecturerId); // Attribute ID
				$lXMLWriter->endElement(); // EvaSysRef
				$lXMLWriter->endElement(); // Lecturer
				
			}
			log_message('debug', 'writeXMLImportFile_5');
			$lXMLWriter->endElement(); // Lecturers
			
			$lXMLWriter->writeElement("name", $lCourse->getName()); // Name
			$lXMLWriter->writeElement("orgroot", $this->config->item('orgroot')); // Organisation
			$lXMLWriter->writeElement("short", str_replace(" ", "", $lCourse->getSemester()) . "_" . $lCourse->getId()); // Short: Semester + ID, example: "FS2016_40"
			$lXMLWriter->writeElement("type", $lCourse->getType()); // Type
			$lXMLWriter->writeElement("turnout", $lCourse->getTurnout()); // Turnout
			$lXMLWriter->startElement("survey"); // Survey
			$lXMLWriter->startElement("EvaSysRef");
			$lXMLWriter->writeAttribute("type", "Survey");
			// Only one survey per course is possible
			$lXMLWriter->writeAttribute("key", "Survey" . $lCourse->getId()); // Attribute ID
			$lXMLWriter->endElement(); // EvaSysRef
			$lXMLWriter->endElement(); // Survey
			$lXMLWriter->endElement(); // Course
			log_message('debug', 'writeXMLImportFile_6');
		}
		log_message('debug', 'writeXMLImportFile_7');
		// <Person> elements
		foreach($this->allLecturers as $lLecturer){
			log_message('debug', 'writeXMLImportFile_8');
			$lXMLWriter->startElement("Person"); // Person
			$lXMLWriter->writeAttribute("key", "User" . $lLecturer["id"]); // Attribute ID
			$lXMLWriter->writeElement("firstname", $lLecturer["firstname"]); // Firstname
			$lXMLWriter->writeElement("lastname", $lLecturer["surname"]); // Lastname
			$lXMLWriter->writeElement("title", $lLecturer["title"]); // Title
			$lXMLWriter->writeElement("email", $lLecturer["email"]); // E-mail address
			$lXMLWriter->writeElement("gender", $lLecturer["gender"]); // Gender
			$lXMLWriter->endElement(); // Person
			
		}
		log_message('debug', 'writeXMLImportFile_9');
		// <Survey> elements
		foreach($courses as $lCourse){
			log_message('debug', 'writeXMLImportFile_10');
			$lXMLWriter->startElement("Survey"); // Survey
			log_message('debug', 'writeXMLImportFile_10.1');
			$lXMLWriter->writeAttribute("key", "Survey" . $lCourse->getId()); // Attribute ID
			// TODO: Finish getSurveyForm() in course_model
			// $lXMLWriter->writeElement("survey_form", $lCourse->getSurveyForm()); // Survey form
			log_message('debug', 'writeXMLImportFile_10.2');
			$lXMLWriter->writeElement("survey_period", $lCourse->getSemester()); // Survey period
			log_message('debug', 'writeXMLImportFile_10.3');
			$lXMLWriter->writeElement("survey_type", $lCourse->getSurveyTypeXMLValue()); // Survey type
			log_message('debug', 'writeXMLImportFile_10.4');
			$lXMLWriter->writeElement("survey_verify", $this->config->item('survey_verify')); // Verification of survey
			log_message('debug', 'writeXMLImportFile_11');
			// Write <survey_tasks> elements only if survey type is online (paper based surveys don't need <task> elements)
			if(strcmp($lCourse->getSurveyType(), 'onlineumfrage') === 0){
				log_message('debug', 'writeXMLImportFile_12');
				$lXMLWriter->startElement("survey_tasks"); // tasks
				// Default: 3 tasks for every online survey (dispatch, remind, close)
				$tasknumber = (intval($lCourse->getId())) * 3 - 2;
				log_message('debug', 'writeXMLImportFile_12.1; tasknumber: ' . $tasknumber);
				while($tasknumber <= (intval($lCourse->getId()) * 3)){
					log_message('debug', 'writeXMLImportFile_13');	
					$lXMLWriter->startElement("survey_task"); // task
					$lXMLWriter->startElement("EvaSysRef");
					$lXMLWriter->writeAttribute("type", "Task");
					$lXMLWriter->writeAttribute("key", "Task" . $tasknumber); // Attribute task number
					$lXMLWriter->endElement(); // EvaSysRef
					$lXMLWriter->endElement(); // task
					$tasknumber += 1;
					log_message('debug', 'writeXMLImportFile_13.1; tasknumber: ' . $tasknumber);
				}
				$lXMLWriter->endElement(); // tasks
				
			}
			$lXMLWriter->endElement(); // survey
			
		}
		log_message('debug', 'writeXMLImportFile_14');
		// <Task> elements
		foreach($courses as $lCourse){
			// Write <Task> elements only if survey type is online (paper based surveys don't need <task> elements)
			if(strcmp($lCourse->getSurveyType(), 'onlineumfrage') === 0){
				log_message('debug', 'writeXMLImportFile_15');
				// Default: 3 tasks for every online survey (dispatch, remind, close)
				$tasknumber = (intval($lCourse->getId())) * 3 - 2;
				log_message('debug', 'writeXMLImportFile_15.1; tasknumber: ' . $tasknumber);
				$lXMLWriter->startElement("Task"); // Task
				$lXMLWriter->writeAttribute("key", "Task" . $tasknumber); // Attribute ID
				
				// dispatch_pswd
				log_message('debug', 'writeXMLImportFile_16');
				$lXMLWriter->writeElement("type", $this->config->item('tasktype_1')); // Type
				$lXMLWriter->writeElement("datetime", $this->config->item('taskdatetime_1')); // Datetime
				$lXMLWriter->writeElement("sender_name", $this->config->item('sender_name')); // Sender name
				$lXMLWriter->writeElement("sender_email", $this->config->item('sender_mail')); // Sender e-mail
				$lXMLWriter->writeElement("text", $this->config->item('taskmailtext_1')); // Mail text
				$lXMLWriter->writeElement("subject", $this->config->item('taskmailsubject')); // Mail subject
				$lXMLWriter->writeElement("dispatch_report", "0"); // Dispatch report
				
				// Recipients
				$lXMLWriter->startElement("recipients"); // Recipients
				foreach($lCourse->getParticipants() as $lRecipient){
					log_message('debug', 'writeXMLImportFile_17');
					$lRecipientId = $this->checkForUniqueRecipient($lRecipient);
					
					$lXMLWriter->startElement("recipient"); // Recipient
					$lXMLWriter->startElement("EvaSysRef");
					$lXMLWriter->writeAttribute("type", "Recipient");
					$lXMLWriter->writeAttribute("key", "Recipient" . $lRecipientId); // Attribute ID
					$lXMLWriter->endElement(); // EvaSysRef
					$lXMLWriter->endElement(); // Recipient
				}
				$lXMLWriter->endElement(); // Recipients
				log_message('debug', 'writeXMLImportFile_17.1; tasknumber: ' . $tasknumber);
				$lXMLWriter->endElement(); // Task
				
				// remind_pswd
				$tasknumber += 1;
				$lXMLWriter->startElement("Task"); // Task
				$lXMLWriter->writeAttribute("key", "Task" . $tasknumber); // Attribute ID
				log_message('debug', 'writeXMLImportFile_18');
				$lXMLWriter->writeElement("type", $this->config->item('tasktype_2')); // Type
				$lXMLWriter->writeElement("datetime", $this->config->item('taskdatetime_2')); // Datetime
				$lXMLWriter->writeElement("sender_name", $this->config->item('sender_name')); // Sender name
				$lXMLWriter->writeElement("sender_email", $this->config->item('sender_mail')); // Sender e-mail
				$lXMLWriter->writeElement("text", $this->config->item('taskmailtext_2')); // Mail text
				$lXMLWriter->writeElement("subject", $this->config->item('taskmailsubject')); // Mail subject
				$lXMLWriter->writeElement("dispatch_report", "0"); // Dispatch report
				$lXMLWriter->endElement(); // Task
				log_message('debug', 'writeXMLImportFile_18.1; tasknumber: ' . $tasknumber);

				// close_survey
				$tasknumber += 1;
				$lXMLWriter->startElement("Task"); // Task
				$lXMLWriter->writeAttribute("key", "Task" . $tasknumber); // Attribute ID
				$lXMLWriter->writeElement("type", $this->config->item('tasktype_3')); // Type
				$lXMLWriter->writeElement("datetime", $this->config->item('taskdatetime_3')); // Datetime
				// $lXMLWriter->writeElement("sender_name", $this->config->item('sender_name')); // Sender name
				// $lXMLWriter->writeElement("sender_email", $this->config->item('sender_mail')); // Sender e-mail
				// $lXMLWriter->writeElement("text", $this->config->item('taskmailtext_2')); // Mail text
				// $lXMLWriter->writeElement("subject", $this->config->item('taskmailsubject')); // Mail subject
				$lXMLWriter->writeElement("dispatch_report", $this->config->item('dispatch_report')); // Dispatch report
				log_message('debug', 'writeXMLImportFile_19.1; tasknumber: ' . $tasknumber);

				
				$lXMLWriter->endElement(); // Task
				
			}
		}
		log_message('debug', 'writeXMLImportFile_20');
		// <Recipient> elements
		foreach($this->allRecipients as $lRecipientId => $lRecipientEmail){
			
			$lXMLWriter->startElement("Recipient"); // Recipient
			$lXMLWriter->writeAttribute("key", "Recipient" . $lRecipientId); // Attribute ID
			$lXMLWriter->writeElement("email", $lRecipientEmail); // E-mail address
			$lXMLWriter->endElement(); // Recipient
			log_message('debug', 'writeXMLImportFile_21');
		}
		
		$lXMLWriter->endElement(); // EvaSys (root element)
		$lXMLWriter->endDocument();
		
		// Create file and write content
		$lFileContent = mb_convert_encoding($lXMLWriter->outputMemory(), "UTF-8"); // Convert content to UTF-8
		// Create filename with timestamp and ending
		$lFilename = "EvaSys-Import_" . date("Y-m-d_H-i-s") . ".xml";
		log_message('debug', 'writeXMLImportFile_22');
		// Add suffix if file with this name already exists in order to not overwrite the existing one
		$filenameSuffix = 0;
		$parts = pathinfo($lFilename);
		$downloadDirectory = $this->config->item('xml_folder');
		while(file_exists($downloadDirectory . $lFilename)){
			$filenameSuffix++;
			$lFilename = $parts["filename"] . "-" . $filenameSuffix . "." . $parts["extension"];
		}
		log_message('debug', 'writeXMLImportFile_23');
		if(($lXMLOutput = fopen($downloadDirectory . $lFilename, "wb")) !== false){
			fwrite($lXMLOutput, pack("CCC", 0xef, 0xbb, 0xbf)); // Write BOM
			fwrite($lXMLOutput, $lFileContent);
			// Close file
			fclose($lXMLOutput);
			// Return filename for download
			return $lFilename;
		}
		else{
			log_message('error', 'Could not write XML file to ' . $downloadDirectory . $lFilename . ' Course IDs: ' . implode(", ", $pCourseIds));
			return false;
		}
		
	}
	
	// Checks if there is already an identical lecturer with the same values as the passed one.
	// Returns ID of existing lecturer or adds passed lecturer to collection and returns ID of this one.
	private function checkForUniqueLecturer($pLecturer){
	
		foreach($this->allLecturers as $lLecturer){
			if(strcasecmp($lLecturer["firstname"], $pLecturer["firstname"]) == 0){ // Firstname matches
				if(strcasecmp($lLecturer["surname"], $pLecturer["surname"]) == 0){ // Lastname matches
					if(strcasecmp($lLecturer["title"], $pLecturer["title"]) == 0){ // Title matches
						if(strcasecmp($lLecturer["email"], $pLecturer["email"]) == 0){ // E-mail address matches
							if(strcasecmp($lLecturer["gender"], $pLecturer["gender"]) == 0){ // Gender matches
								// Lecturer already exists, return ID of this one
								return $lLecturer["id"];
							}
						}
					}
				}
			}
		}
		
		// Lecturer does not exist, add to lecturer collection and return his ID
		array_push($this->allLecturers, $pLecturer);
		return $pLecturer["id"];
	}
	
	// Checks if there is already an identical recipient with the same e-mail address as the passed one.
	// Returns ID of existing recipient or adds passed recipient to collection and returns ID of this one.
	private function checkForUniqueRecipient($pRecipientEmail){
	
		$recipientId = array_search($pRecipientEmail, $this->allRecipients);
		
		// If recipient mail address is not in collection yet, add it
		if($recipientId === FALSE){
			// First recipient is placed at index 1, position 0 is unused
			$this->allRecipients[$this->newRecipientIndex] = $pRecipientEmail;
			$this->newRecipientIndex += 1;
			$recipientId = array_search($pRecipientEmail, $this->allRecipients);
		}
		
		return $recipientId;
		
	}
	
}